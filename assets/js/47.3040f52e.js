(window.webpackJsonp=window.webpackJsonp||[]).push([[47],{184:function(t,n,a){"use strict";a.r(n);var e=a(0),r=Object(e.a)({},(function(){var t=this,n=t.$createElement,a=t._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"十-监听文件变化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#十-监听文件变化"}},[t._v("#")]),t._v(" 十.监听文件变化")]),t._v(" "),a("p",[t._v("软件工程师做的事情基本都是在实现自动化，比如各种业务系统是为了业务运转的自动化，部署系统是为了运维的自动化，对于开发者本身，自动化也是提升效率的关键环节，在实际开发过程中也有不少事情是可以自动化的。")]),t._v(" "),a("p",[t._v("拥抱现代前端工作流的同学都会有代码风格检查、单元测试等环节，这样就很需要在代码变更之后立即得到反馈，如代码改动导致了那个 Case 失败，哪块不符合团队的编码规范等。")]),t._v(" "),a("p",[t._v("使用 gulp、grunt 的同学，可能对这种功能非常熟悉，不就是 watch 么？确实是，使用 npm script 我们也可以实现类似的功能。下面详细介绍如何改造我们的项目实现单测、代码检查的自动化。")]),t._v(" "),a("h2",{attrs:{id:"单元测试自动化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#单元测试自动化"}},[t._v("#")]),t._v(" 单元测试自动化")]),t._v(" "),a("p",[t._v("幸运的是，mocha 本身支持 "),a("code",[t._v("--watch")]),t._v(" 参数，即在代码变化时自动重跑所有的测试，我们只需要在 scripts 对象中新增一条命令即可：")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('     "test": "cross-env NODE_ENV=test mocha tests/",\n+    "watch:test": "npm t -- --watch",\n     "cover": "node scripts/cover.js",\n\n')])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("p",[t._v("尝试运行 npm run watch:test，我们会发现进程并没有退出，接下来尝试去修改测试代码，测试是不是自动重跑了呢？自己试试看。")]),t._v(" "),a("h2",{attrs:{id:"代码检查自动化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#代码检查自动化"}},[t._v("#")]),t._v(" 代码检查自动化")]),t._v(" "),a("p",[t._v("我们使用的代码检查工具 "),a("a",{attrs:{href:"https://stylelint.io",target:"_blank",rel:"noopener noreferrer"}},[t._v("stylelint"),a("OutboundLink")],1),t._v("、"),a("a",{attrs:{href:"https://eslint.org",target:"_blank",rel:"noopener noreferrer"}},[t._v("eslint"),a("OutboundLink")],1),t._v("、"),a("a",{attrs:{href:"https://github.com/zaach/jsonlint",target:"_blank",rel:"noopener noreferrer"}},[t._v("jsonlint"),a("OutboundLink")],1),t._v(" 不全支持 watch 模式，这里我们需要借助 "),a("a",{attrs:{href:"https://github.com/Qard/onchange",target:"_blank",rel:"noopener noreferrer"}},[t._v("onchange"),a("OutboundLink")],1),t._v(" 工具包来实现，onchange 可以方便的让我们在文件被修改、添加、删除时运行需要的命令。")]),t._v(" "),a("h3",{attrs:{id:"_1-安装项目依赖"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-安装项目依赖"}},[t._v("#")]),t._v(" 1. 安装项目依赖")]),t._v(" "),a("p",[t._v("使用如下命令安装 onchange 到项目依赖中：")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("npm i onchange -D\n# npm install onchange --save-dev\n# yarn add onchange -D\n\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("h3",{attrs:{id:"_2-添加-npm-script"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-添加-npm-script"}},[t._v("#")]),t._v(" 2. 添加 npm script")]),t._v(" "),a("p",[t._v("按照如下提示添加 watch:lint 和 watch 两个子命令：")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('+    "watch": "npm-run-all --parallel watch:*",\n+    "watch:lint": "onchange -i \\"**/*.js\\" \\"**/*.less\\" -- npm run lint",\n     "watch:test": "npm t -- --watch",\n\n')])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("p",[t._v("关于改动的几点说明：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("watch:lint")]),t._v(" 里面的文件匹配模式可以使用通配符，但是模式两边使用了转义的双引号，这样是跨平台兼容的；")]),t._v(" "),a("li",[a("code",[t._v("watch:lint")]),t._v(" 里面的 "),a("code",[t._v("-i")]),t._v(" 参数是让 onchange 在启动时就运行一次 "),a("code",[t._v("--")]),t._v(" 之后的命令，即代码没变化的时候，变化前后的对比大多数时候还是有价值的；")]),t._v(" "),a("li",[t._v("watch 命令实际上是使用了 npm-run-all 来运行所有的 watch 子命令；")])]),t._v(" "),a("blockquote",[a("p",[a("strong",[t._v("TIP#15")]),t._v("：有没有好奇过 onchange 是怎么实现文件系统监听的？所有的魔法都藏在它的源代码里面，实际上它使用了跨平台的文件系统监听包 "),a("a",{attrs:{href:"https://github.com/paulmillr/chokidar",target:"_blank",rel:"noopener noreferrer"}},[t._v("chokidar"),a("OutboundLink")],1),t._v("，基于它，你能做点什么有意思的事情呢？")])]),t._v(" "),a("p",[t._v("onchange 有个不太醒目的特性是，文件系统发生变化之后，他在运行指定命令之前输出哪个文件发生了哪些变化，如下图红框中的内容：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2017/12/12/160481d04f4e2aa5?w=951&h=533&f=png&s=77037",alt:""}})]),t._v(" "),a("p",[t._v("读到这里，有没有觉得 onchange 可以和 gulp、grunt 的 watch 一样强大。")]),t._v(" "),a("blockquote",[a("p",[t._v("除了上面的单测重跑和代码检查之外，你还有什么需求需要放在 onchange 里面？欢迎留言讨论。")])]),t._v(" "),a("hr"),t._v(" "),a("blockquote",[a("p",[t._v("本节用到的代码见 "),a("a",{attrs:{href:"https://github.com/wangshijun/automated-workflow-with-npm-script/tree/09-run-npm-script-with-onchange",target:"_blank",rel:"noopener noreferrer"}},[t._v("GitHub"),a("OutboundLink")],1),t._v("，想边看边动手练习的同学可以拉下来自己改，注意切换到正确的分支 "),a("code",[t._v("09-run-npm-script-with-onchange")]),t._v("。")])]),t._v(" "),a("hr")])}),[],!1,null,null,null);n.default=r.exports}}]);