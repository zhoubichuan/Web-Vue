(window.webpackJsonp=window.webpackJsonp||[]).push([[49],{186:function(s,t,n){"use strict";n.r(t);var e=n(0),a=Object(e.a)({},(function(){var s=this,t=s.$createElement,n=s._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"十二-git-hooks"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#十二-git-hooks"}},[s._v("#")]),s._v(" 十二.Git Hooks")]),s._v(" "),n("p",[s._v("严肃的研发团队都会使用 Git 之类的版本管理系统来管理代码，随着 GitHub 的广受欢迎，相信大家对 Git 并不陌生。Git 在代码版本管理之外，也提供了类似 npm script 里 "),n("code",[s._v("pre")]),s._v("、"),n("code",[s._v("post")]),s._v(" 的钩子机制，叫做 "),n("a",{attrs:{href:"https://git-scm.com/book/gr/v2/Customizing-Git-Git-Hooks",target:"_blank",rel:"noopener noreferrer"}},[s._v("Git Hooks"),n("OutboundLink")],1),s._v("，钩子机制能让我们在代码 commit、push 之前（后）做自己想做的事情。")]),s._v(" "),n("p",[s._v("Git Hooks 能给我们的开发工作流带来哪些可能呢？我带的团队中，大部分项目通过 npm script 为本地仓库配置了 pre-commit、pre-push 钩子检查，且正计划为远程仓库（"),n("a",{attrs:{href:"https://git-scm.com/book/en/v1/Git-Basics-Working-with-Remotes",target:"_blank",rel:"noopener noreferrer"}},[s._v("Remotes"),n("OutboundLink")],1),s._v("）配置 pre-receive 钩子检查。两种钩子的检查目的各不相同，本地检查是为了尽早给提交代码的同学反馈，哪些地方不符合规范，哪些地方需要注意；而远程检查是为了确保远程仓库收到的代码是符合团队约定的规范的，因为如果没有远程检查环节，熟悉 Git 的同学使用 "),n("code",[s._v("--no-verify")]),s._v("（简写为 "),n("code",[s._v("-n")]),s._v("） 参数跳过本地检查时，本地检查就形同虚设。")]),s._v(" "),n("p",[s._v("可能有同学会嘀咕，在 IDE 里面配置各种检查难道还不够么？对个人开发者来说足够了，但对于团队，如果对代码里面的坏味道听之任之，久而久之整个团队的代码质量标准都会被拉低，到最后坑的还是团队的每个成员，不是么？之前没想到这层的同学建议去看看破窗理论。")]),s._v(" "),n("p",[s._v("那么增加 Git Hooks 的必要性聊清楚了，我们应该在 Git Hooks 里面做哪些事情呢？通常来说：检查编码规范，把低级错误趁早挖出来修好；运行测试，用自动化的方法做功能回归，测试本身就包含很多话题，且按下不表。")]),s._v(" "),n("p",[s._v("前端社区里有多种结合 npm script 和 git-hooks 的方案，比如 "),n("a",{attrs:{href:"https://github.com/observing/pre-commit",target:"_blank",rel:"noopener noreferrer"}},[s._v("pre-commit"),n("OutboundLink")],1),s._v("、"),n("a",{attrs:{href:"https://github.com/typicode/husky",target:"_blank",rel:"noopener noreferrer"}},[s._v("husky"),n("OutboundLink")],1),s._v("，相比较而言 husky 更好用，它支持更多的 Git Hooks 种类，再结合 "),n("a",{attrs:{href:"https://github.com/okonet/lint-staged",target:"_blank",rel:"noopener noreferrer"}},[s._v("lint-staged"),n("OutboundLink")],1),s._v(" 试用就更溜。")]),s._v(" "),n("p",[s._v("接下来我们逐步给示例项目配置本地的 Git Hooks，而在钩子中运行的是已有的 npm script，比如 lint、test：")]),s._v(" "),n("h3",{attrs:{id:"_1-安装项目依赖"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-安装项目依赖"}},[s._v("#")]),s._v(" 1. 安装项目依赖")]),s._v(" "),n("p",[s._v("使用如下命令安装 husky、lint-staged 到项目依赖中：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("npm i husky lint-staged -D\n# npm install husky lint-staged --save-dev\n# yarn add husky lint-staged -D\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[s._v("husky 的基本工作原理可以稍作解释下，翻看 husky 的 "),n("a",{attrs:{href:"https://github.com/typicode/husky/blob/master/package.json",target:"_blank",rel:"noopener noreferrer"}},[s._v("package.json"),n("OutboundLink")],1),s._v("，注意其中的 scripts 声明：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('  "scripts": {\n    "test": "jest",\n    "format": "prettier --single-quote --no-semi --write **/*.js",\n    "install": "node ./bin/install.js",\n    "uninstall": "node ./bin/uninstall.js"\n  },\n\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("p",[s._v("这里面的 install 就是你在项目中安装 husky 时执行的脚本（所有的魔法都藏在在这里了，哈哈）。")]),s._v(" "),n("p",[s._v("然后再检查我们仓库的 "),n("code",[s._v(".git/hooks")]),s._v(" 目录，会发现里面的钩子都被 husky 替换掉了，注意下图中三个红色框中的内容：")]),s._v(" "),n("p",[n("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2017/12/14/16052956cce1a5c3?w=905&h=519&f=png&s=93983",alt:""}})]),s._v(" "),n("h3",{attrs:{id:"_2-添加-npm-script"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-添加-npm-script"}},[s._v("#")]),s._v(" 2. 添加 npm script")]),s._v(" "),n("p",[s._v("接下来需要在 scripts 对象中增加 husky 能识别的 Git Hooks 脚本：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('   "scripts": {\n+    "precommit": "npm run lint",\n+    "prepush": "npm run test",\n     "lint": "npm-run-all --parallel lint:*",\n     "lint:js": "eslint *.js",\n\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("p",[s._v("这两个命令的作用是在代码提交前运行所有的代码检查 npm run lint；在代码 push 到远程之前，运行 lint 和自动化测试（"),n("strong",[s._v("言外之意，如果测试失败，push 就不会成功")]),s._v("），虽然运行的是 npm run test，但是 lint 也配置在了 pretest 里面。")]),s._v(" "),n("p",[s._v("然后尝试提交代码："),n("code",[s._v("git commit -am 'add husky hooks'")]),s._v("，能看到 pre-commit 钩子已经生效：")]),s._v(" "),n("p",[n("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2017/12/14/16052959456b87ca?w=586&h=110&f=png&s=22843",alt:""}})]),s._v(" "),n("h3",{attrs:{id:"_3-用-lint-staged-改进-pre-commit"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-用-lint-staged-改进-pre-commit"}},[s._v("#")]),s._v(" 3. 用 lint-staged 改进 pre-commit")]),s._v(" "),n("p",[s._v("如上的配置乍看起来没有任何问题，但是在大型项目、遗留项目中接入过 lint 工作流的同学可能深有体会，每次提交代码会检查所有的代码，可能比较慢就不说了，接入初期 lint 工具可能会报告几百上千个错误，这时候估计大多数人内心是崩溃的，尤其是当你是新规范的推进者，遇到的阻力会增大好几倍，毕竟大多数人不愿意背别人的锅，坏笑。")]),s._v(" "),n("p",[s._v("好在，我们有 lint-staged 来环节这个问题，每个团队成员提交的时候，只检查当次改动的文件，具体改动如下：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('   "scripts": {\n-    "precommit": "npm run lint",\n+    "precommit": "lint-staged",\n     "prepush": "npm run test",\n     "lint": "npm-run-all --parallel lint:*",\n   },\n+  "lint-staged": {\n+    "*.js": "eslint",\n+    "*.less": "stylelint",\n+    "*.css": "stylelint",\n+    "*.json": "jsonlint --quiet",\n+    "*.md": "markdownlint --config .markdownlint.json"\n+  },\n   "keywords": [],\n\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br")])]),n("p",[s._v("接下来我们故意在 index.js 中引入错误：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("-  return NaN;\n+  return NaN\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[s._v("然后尝试提交这个文件："),n("code",[s._v("git commit -m 'try to add eslint error' index.js")]),s._v("，结果如下图：")]),s._v(" "),n("p",[n("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2017/12/14/1605295bb21f26aa?w=733&h=503&f=png&s=90551",alt:""}})]),s._v(" "),n("p",[s._v("上图中带有 "),n("code",[s._v("Running Tasks")]),s._v(" 字样的列表就是 lint-staged 根据当前要提交的文件和 package.json 中配置的检查命令去执行的动态输出。红色框里面提示 husky 的 pre-commit 钩子执行失败，提交也就没有成功。")]),s._v(" "),n("p",[s._v("关于 lint-staged 还有些高级的用法，比如对单个文件执行多条命令，对单个文件动态自动修复，自动格式化等等，留待大家自己去探索好了。")]),s._v(" "),n("p",[s._v("撤销掉有错误的修改，提交之后，我们往远程 push 新分支，结果如下图：")]),s._v(" "),n("p",[n("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2017/12/14/16052e6c6cba85ff?w=867&h=460&f=png&s=160857",alt:""}})])])}),[],!1,null,null,null);t.default=a.exports}}]);