(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{141:function(t,e,s){t.exports=s.p+"assets/img/Vuex.83b3d553.png"},231:function(t,e,s){"use strict";s.r(e);var a=s(0),r=Object(a.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"一、vuex-源码概览"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、vuex-源码概览"}},[t._v("#")]),t._v(" 一、Vuex 源码概览")]),t._v(" "),a("p",[a("img",{attrs:{src:s(141),alt:""}})]),t._v(" "),a("h2",{attrs:{id:"_1-实例化vuex-store"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-实例化vuex-store"}},[t._v("#")]),t._v(" 1.实例化Vuex.store")]),t._v(" "),a("p",[t._v("将用户的配置文件通过new Vuex.store(options) 得到一个对象，以store值作为vue初始化实例的对象的一个值传入")]),t._v(" "),a("h2",{attrs:{id:"_2-加载vuex插件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-加载vuex插件"}},[t._v("#")]),t._v(" 2.加载Vuex插件")]),t._v(" "),a("p",[t._v("Vuex是以插件的方式通过Vue.use加载的，当Vue.use(Vuex)时,内部会调用Vuex这个类上面的install方法，通过Vue.mixin方法混入到beforeCreate这个生命周期中this.store=this.$option.store")]),t._v(" "),a("h2",{attrs:{id:"_3-当加载组件的时候"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-当加载组件的时候"}},[t._v("#")]),t._v(" 3.当加载组件的时候")]),t._v(" "),a("p",[t._v("执行生命周期函数会将之前实例化Vuex.store挂载到this.store上，用户可以使用this.store.state、this.store.mutation")]),t._v(" "),a("h3",{attrs:{id:"_3-1-mapstate"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-mapstate"}},[t._v("#")]),t._v(" 3.1 mapState")]),t._v(" "),a("p",[t._v("用户将mapState在computed中使用会返回一个对象，这个对象就是之前在store中写的配置，里面有各种state，在compute中会转换成一个函数，返回值的state指向store中的state，key就是自己想要拿到的key")])])}),[],!1,null,null,null);e.default=r.exports}}]);